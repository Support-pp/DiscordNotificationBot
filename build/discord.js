"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const jwt = require('jsonwebtoken');
const fs = require('fs');
var privateKEY = process.env.PRIVATE_KEY; //fs.readFileSync('./private.pem', 'utf8');
var publicKEY = process.env.PUBLIC_KEY; //fs.readFileSync('./public.pem', 'utf8');
const config = require('config-yml');
class DiscordTS {
    constructor() {
        this.client = new discord_js_1.Client();
    }
    start() {
        this.client.on("ready", () => {
            console.log("[>] Connected.");
            console.log('Logged in as ' + this.client.user.tag);
        });
        this.client.on("message", (msg) => {
            if (msg.content === config.discord.cmd_id) {
                try {
                    if (!msg.member.hasPermission(config.discord.hasPermission)) {
                        msg.reply(config.message.no_permission);
                        return;
                    }
                }
                catch (e) { }
                var token = jwt.sign({ channel: msg.channel.id }, privateKEY, { algorithm: "RS256" });
                msg.reply(config.message.header_generate_new_token);
                msg.channel.send("```" + token + "```");
            }
            if (msg.content.startsWith(config.discord.cmd_verify)) {
                var res = msg.content.split(" ");
                if (res.length != 2) {
                    msg.reply(config.message.invalied_verify_cmd);
                    return;
                }
                try {
                    var decoded = jwt.verify(res[1], publicKEY);
                }
                catch (err) {
                    msg.channel.send(config.message.jwt_token_incorrect);
                    return;
                }
                if (decoded.channel == msg.channel.id) {
                    msg.channel.send(config.message.jwt_token_correct);
                    return;
                }
                msg.channel.send(config.message.jwt_token_correct_but_wrong_channel.replace("{channelid}", decoded.channel));
            }
        });
        this.client.login(process.env.TOKEN);
    }
    /*
     *  Send message to discord.
     */
    send(msg, channel) {
        const msgO = JSON.parse(msg);
        console.log("> Send " + JSON.stringify(msgO) + " to channel {" + channel + "}");
        if (msgO.embed) {
            const embedMessage = new discord_js_1.RichEmbed()
                .setColor(config.discord.embedColor)
                .setDescription(msgO.message);
            this.client.channels.get(channel).send(embedMessage);
            return;
        }
        this.client.channels.get(channel).send(msgO.message);
    }
}
exports.DiscordTS = DiscordTS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaXNjb3JkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXdEO0FBRXhELE1BQU0sR0FBRyxHQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNyQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBSSxVQUFVLEdBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUEsQ0FBQywyQ0FBMkM7QUFDckYsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUEsQ0FBQywwQ0FBMEM7QUFDakYsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBR3JDLE1BQWEsU0FBUztJQUdwQjtRQUNDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxtQkFBTSxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVNLEtBQUs7UUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtZQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNoRSxDQUFDLENBQUMsQ0FBQTtRQUVPLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ25DLElBQUksR0FBRyxDQUFDLE9BQU8sS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDM0MsSUFBRztvQkFDQyxJQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBQzt3QkFDdkQsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3dCQUN4QyxPQUFPO3FCQUNWO2lCQUNKO2dCQUFBLE9BQU0sQ0FBQyxFQUFDLEdBQUU7Z0JBRVAsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLFNBQVMsRUFBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RixHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztnQkFDcEQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLEtBQUssR0FBQyxLQUFLLENBQUMsQ0FBQzthQUN2QztZQUdELElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDbkQsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUM7b0JBQ2hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO29CQUM5QyxPQUFPO2lCQUNWO2dCQUNELElBQUk7b0JBQ0EsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7aUJBQy9DO2dCQUFDLE9BQU0sR0FBRyxFQUFFO29CQUNWLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztvQkFDckQsT0FBTztpQkFDVDtnQkFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUM7b0JBQ25DLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDbkQsT0FBTztpQkFDVDtnQkFDRSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDbkg7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUdILElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVIOztPQUVHO0lBQ1ksSUFBSSxDQUFDLEdBQVcsRUFBRSxPQUFjO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxlQUFlLEdBQUMsT0FBTyxHQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTNFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBQztZQUNYLE1BQU0sWUFBWSxHQUFHLElBQUksc0JBQVMsRUFBRTtpQkFDOUIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO2lCQUNwQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBRXpCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFN0QsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNQO0FBeEVGLDhCQXdFRSIsImZpbGUiOiJkaXNjb3JkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50LCBNZXNzYWdlLCBSaWNoRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IHsgZGVjb2RlIH0gZnJvbSBcInB1bnljb2RlXCI7XG5jb25zdCBqd3QgID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcHJpdmF0ZUtFWSAgPSBwcm9jZXNzLmVudi5QUklWQVRFX0tFWSAvL2ZzLnJlYWRGaWxlU3luYygnLi9wcml2YXRlLnBlbScsICd1dGY4Jyk7XG52YXIgcHVibGljS0VZID0gcHJvY2Vzcy5lbnYuUFVCTElDX0tFWSAvL2ZzLnJlYWRGaWxlU3luYygnLi9wdWJsaWMucGVtJywgJ3V0ZjgnKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZy15bWwnKTtcblxuXG5leHBvcnQgY2xhc3MgRGlzY29yZFRTIHtcblx0XHRwcml2YXRlIGNsaWVudDogQ2xpZW50O1xuXG5cdFx0Y29uc3RydWN0b3IoKSB7XG5cdFx0XHR0aGlzLmNsaWVudCA9IG5ldyBDbGllbnQoKVxuXHRcdH1cblxuXHRcdHB1YmxpYyBzdGFydCgpOiB2b2lkIHtcblx0XHRcdHRoaXMuY2xpZW50Lm9uKFwicmVhZHlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiWz5dIENvbm5lY3RlZC5cIilcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9nZ2VkIGluIGFzICcgKyB0aGlzLmNsaWVudC51c2VyLnRhZylcblx0XHRcdH0pXG5cbiAgICAgICAgICAgIHRoaXMuY2xpZW50Lm9uKFwibWVzc2FnZVwiLCAobXNnOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobXNnLmNvbnRlbnQgPT09IGNvbmZpZy5kaXNjb3JkLmNtZF9pZCkge1xuICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIW1zZy5tZW1iZXIuaGFzUGVybWlzc2lvbihjb25maWcuZGlzY29yZC5oYXNQZXJtaXNzaW9uKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cucmVwbHkoY29uZmlnLm1lc3NhZ2Uubm9fcGVybWlzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9Y2F0Y2goZSl7fVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGp3dC5zaWduKHsgY2hhbm5lbDogbXNnLmNoYW5uZWwuaWR9LCBwcml2YXRlS0VZLCB7IGFsZ29yaXRobTogIFwiUlMyNTZcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgbXNnLnJlcGx5KGNvbmZpZy5tZXNzYWdlLmhlYWRlcl9nZW5lcmF0ZV9uZXdfdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBtc2cuY2hhbm5lbC5zZW5kKFwiYGBgXCIrdG9rZW4rXCJgYGBcIik7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBpZiAobXNnLmNvbnRlbnQuc3RhcnRzV2l0aChjb25maWcuZGlzY29yZC5jbWRfdmVyaWZ5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gbXNnLmNvbnRlbnQuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmxlbmd0aCAhPSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZy5yZXBseShjb25maWcubWVzc2FnZS5pbnZhbGllZF92ZXJpZnlfY21kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZWQgPSBqd3QudmVyaWZ5KHJlc1sxXSwgcHVibGljS0VZKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgbXNnLmNoYW5uZWwuc2VuZChjb25maWcubWVzc2FnZS5qd3RfdG9rZW5faW5jb3JyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlY29kZWQuY2hhbm5lbCA9PSBtc2cuY2hhbm5lbC5pZCl7XG4gICAgICAgICAgICAgICAgICAgICAgIG1zZy5jaGFubmVsLnNlbmQoY29uZmlnLm1lc3NhZ2Uuand0X3Rva2VuX2NvcnJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgbXNnLmNoYW5uZWwuc2VuZChjb25maWcubWVzc2FnZS5qd3RfdG9rZW5fY29ycmVjdF9idXRfd3JvbmdfY2hhbm5lbC5yZXBsYWNlKFwie2NoYW5uZWxpZH1cIiwgZGVjb2RlZC5jaGFubmVsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgdGhpcy5jbGllbnQubG9naW4ocHJvY2Vzcy5lbnYuVE9LRU4pXG5cdFx0fVxuXG4vKlxuICogIFNlbmQgbWVzc2FnZSB0byBkaXNjb3JkLlxuICovXG4gICAgICAgIHB1YmxpYyBzZW5kKG1zZzogc3RyaW5nLCBjaGFubmVsOnN0cmluZyk6IHZvaWR7XG4gICAgICAgICAgIGNvbnN0IG1zZ08gPSBKU09OLnBhcnNlKG1zZyk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiPiBTZW5kIFwiICsgSlNPTi5zdHJpbmdpZnkobXNnTykgKyBcIiB0byBjaGFubmVsIHtcIitjaGFubmVsK1wifVwiKVxuXG4gICAgICAgICAgICBpZiAobXNnTy5lbWJlZCl7XG4gICAgICAgICAgICAgICAgY29uc3QgZW1iZWRNZXNzYWdlID0gbmV3IFJpY2hFbWJlZCgpXG4gICAgICAgICAgICAgICAgICAgICAuc2V0Q29sb3IoY29uZmlnLmRpc2NvcmQuZW1iZWRDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKG1zZ08ubWVzc2FnZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuY2hhbm5lbHMuZ2V0KGNoYW5uZWwpLnNlbmQoZW1iZWRNZXNzYWdlKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jbGllbnQuY2hhbm5lbHMuZ2V0KGNoYW5uZWwpLnNlbmQobXNnTy5tZXNzYWdlKTtcbiAgICAgICAgfVxuXHR9Il0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9idWlsZCJ9
