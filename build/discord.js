"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const jwt = require('jsonwebtoken');
const fs = require('fs');
var privateKEY = fs.readFileSync('./private.pem', 'utf8');
var publicKEY = fs.readFileSync('./public.pem', 'utf8');
const config = require('config-yml');
class DiscordTS {
    constructor() {
        this.client = new discord_js_1.Client();
    }
    start() {
        this.client.on("ready", () => {
            console.log("[] Connected.");
            console.log('Logged in as ' + this.client.user.tag);
        });
        this.client.on("message", msg => {
            if (msg.content === config.discord.cmd_id) {
                if (!msg.member.hasPermission(config.discord.hasPermission)) {
                    msg.reply(config.message.no_permission);
                    return;
                }
                var token = jwt.sign({ channel: msg.channel.id }, privateKEY, { algorithm: "RS256" });
                msg.reply(config.message.header_generate_new_token);
                msg.channel.send("```" + token + "```");
            }
            if (msg.content.startsWith(config.discord.cmd_verify)) {
                var res = msg.content.split(" ");
                if (res.length != 2) {
                    msg.reply(config.message.invalied_verify_cmd);
                    return;
                }
                try {
                    var decoded = jwt.verify(res[1], publicKEY);
                }
                catch (err) {
                    msg.channel.send(config.message.jwt_token_incorrect);
                    return;
                }
                if (decoded.channel == msg.channel.id) {
                    msg.channel.send(config.message.jwt_token_correct);
                    return;
                }
                msg.channel.send(config.message.jwt_token_correct_but_wrong_channel.replace("{channelid}", decoded.channel));
            }
        });
        this.client.login(config.discord.token);
    }
    /*
     *  Send message to discord.
     */
    send(msg, channel) {
        const msgO = JSON.parse(msg);
        console.log("> Send " + JSON.stringify(msgO) + " to channel {" + channel + "}");
        if (msgO.embed) {
            const embedMessage = new discord_js_1.RichEmbed()
                .setColor(config.discord.embedColor)
                .setDescription(msgO.message);
            this.client.channels.get(channel).send(embedMessage);
            return;
        }
        this.client.channels.get(channel).send(msgO.message);
    }
}
exports.DiscordTS = DiscordTS;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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c2FnZSwgUmljaEVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcbmltcG9ydCB7IGRlY29kZSB9IGZyb20gXCJwdW55Y29kZVwiO1xuY29uc3Qgand0ICA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHByaXZhdGVLRVkgID0gZnMucmVhZEZpbGVTeW5jKCcuL3ByaXZhdGUucGVtJywgJ3V0ZjgnKTtcbnZhciBwdWJsaWNLRVkgPSBmcy5yZWFkRmlsZVN5bmMoJy4vcHVibGljLnBlbScsICd1dGY4Jyk7XG5jb25zdCBjb25maWcgPSByZXF1aXJlKCdjb25maWcteW1sJyk7XG5cblxuZXhwb3J0IGNsYXNzIERpc2NvcmRUUyB7XG5cdFx0cHJpdmF0ZSBjbGllbnQ6IENsaWVudDtcblxuXHRcdGNvbnN0cnVjdG9yKCkge1xuXHRcdFx0dGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KClcblx0XHR9XG5cblx0XHRwdWJsaWMgc3RhcnQoKTogdm9pZCB7XG5cdFx0XHR0aGlzLmNsaWVudC5vbihcInJlYWR5XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltdIENvbm5lY3RlZC5cIilcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9nZ2VkIGluIGFzICcgKyB0aGlzLmNsaWVudC51c2VyLnRhZylcblx0XHRcdH0pXG5cbiAgICAgICAgICAgIHRoaXMuY2xpZW50Lm9uKFwibWVzc2FnZVwiLCBtc2cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtc2cuY29udGVudCA9PT0gY29uZmlnLmRpc2NvcmQuY21kX2lkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIW1zZy5tZW1iZXIuaGFzUGVybWlzc2lvbihjb25maWcuZGlzY29yZC5oYXNQZXJtaXNzaW9uKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cucmVwbHkoY29uZmlnLm1lc3NhZ2Uubm9fcGVybWlzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBqd3Quc2lnbih7IGNoYW5uZWw6IG1zZy5jaGFubmVsLmlkfSwgcHJpdmF0ZUtFWSwgeyBhbGdvcml0aG06ICBcIlJTMjU2XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIG1zZy5yZXBseShjb25maWcubWVzc2FnZS5oZWFkZXJfZ2VuZXJhdGVfbmV3X3Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgbXNnLmNoYW5uZWwuc2VuZChcImBgYFwiK3Rva2VuK1wiYGBgXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgaWYgKG1zZy5jb250ZW50LnN0YXJ0c1dpdGgoY29uZmlnLmRpc2NvcmQuY21kX3ZlcmlmeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IG1zZy5jb250ZW50LnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGggIT0gMil7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cucmVwbHkoY29uZmlnLm1lc3NhZ2UuaW52YWxpZWRfdmVyaWZ5X2NtZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVkID0gand0LnZlcmlmeShyZXNbMV0sIHB1YmxpY0tFWSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIG1zZy5jaGFubmVsLnNlbmQoY29uZmlnLm1lc3NhZ2Uuand0X3Rva2VuX2luY29ycmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWNvZGVkLmNoYW5uZWwgPT0gbXNnLmNoYW5uZWwuaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICBtc2cuY2hhbm5lbC5zZW5kKGNvbmZpZy5tZXNzYWdlLmp3dF90b2tlbl9jb3JyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIG1zZy5jaGFubmVsLnNlbmQoY29uZmlnLm1lc3NhZ2Uuand0X3Rva2VuX2NvcnJlY3RfYnV0X3dyb25nX2NoYW5uZWwucmVwbGFjZShcIntjaGFubmVsaWR9XCIsIGRlY29kZWQuY2hhbm5lbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIHRoaXMuY2xpZW50LmxvZ2luKGNvbmZpZy5kaXNjb3JkLnRva2VuKVxuXHRcdH1cblxuLypcbiAqICBTZW5kIG1lc3NhZ2UgdG8gZGlzY29yZC5cbiAqL1xuICAgICAgICBwdWJsaWMgc2VuZChtc2c6IHN0cmluZywgY2hhbm5lbDpzdHJpbmcpOiB2b2lke1xuICAgICAgICAgICBjb25zdCBtc2dPID0gSlNPTi5wYXJzZShtc2cpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIj4gU2VuZCBcIiArIEpTT04uc3RyaW5naWZ5KG1zZ08pICsgXCIgdG8gY2hhbm5lbCB7XCIrY2hhbm5lbCtcIn1cIilcblxuICAgICAgICAgICAgaWYgKG1zZ08uZW1iZWQpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGVtYmVkTWVzc2FnZSA9IG5ldyBSaWNoRW1iZWQoKVxuICAgICAgICAgICAgICAgICAgICAgLnNldENvbG9yKGNvbmZpZy5kaXNjb3JkLmVtYmVkQ29sb3IpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjcmlwdGlvbihtc2dPLm1lc3NhZ2UpXG5cbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5jaGFubmVscy5nZXQoY2hhbm5lbCkuc2VuZChlbWJlZE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xpZW50LmNoYW5uZWxzLmdldChjaGFubmVsKS5zZW5kKG1zZ08ubWVzc2FnZSk7XG4gICAgICAgIH1cblx0fSJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vYnVpbGQifQ==
