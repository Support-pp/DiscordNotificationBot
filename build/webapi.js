"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const rateLimit = require("express-rate-limit");
var bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const index = require('./index');
var publicKEY = fs.readFileSync('./public.pem', 'utf8');
class WebApi {
    start(bot) {
        const app = express();
        app.set('trust proxy', 1);
        app.use(bodyParser.urlencoded({ extended: false }));
        //Define API rate limit
        const limiter = rateLimit({
            windowMs: 1 * 60 * 1000,
            max: 5
        });
        app.use(limiter);
        app.get('/', function (req, res) {
            res.send('Hello World!');
        });
        //Validate JSON body.
        app.use((req, res, next) => {
            bodyParser.json()(req, res, (err) => {
                if (err) {
                    console.log("[->] Wrong json reuest.");
                    return res.status(400).json({
                        status: 400,
                        id: "JSON struct not valied."
                    });
                }
                next();
            });
        });
        app.post("/api/discord/notification", function (req, res) {
            if (!req.headers.authorization) {
                res.status(401).json({
                    status: 401,
                    message: "Please use Bearer Token. You get the token by typing !id to your discord channel."
                });
                return;
            }
            var authHeader = req.headers.authorization.replace("Bearer ", "");
            try {
                var decoded = jwt.verify(authHeader, publicKEY);
            }
            catch (err) {
                res.status(401).json({
                    status: 401,
                    message: "The token is not correct. Please update your code. !id"
                });
                return;
            }
            try {
                if (req.body.embed == undefined || req.body.message == undefined) {
                    console.log("[->] Request property not set.");
                    return res.status(400).json({
                        status: 400,
                        message: "Your json body need the property (embed:bool) (message:string)"
                    });
                }
                bot.send(JSON.stringify(req.body), decoded.channel);
            }
            catch (e) {
                console.log("ERROR! :: " + JSON.stringify(req.body));
            }
            res.status(200).json({
                status: 200,
                id: "oke send"
            });
        });
        app.listen(8080, function () {
            console.log('Example app listening on port 8080!');
        });
    }
}
exports.WebApi = WebApi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QztnQkFDSCxPQUFPO2FBQ1Y7WUFFTCxJQUFHO2dCQUNDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksU0FBUyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsRUFBQztvQkFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFBO29CQUM3QyxPQUFTLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUMxQixNQUFNLEVBQUUsR0FBRzt3QkFDWCxPQUFPLEVBQUUsZ0VBQWdFO3FCQUM1RSxDQUFDLENBQUM7aUJBQ047Z0JBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDdkQ7WUFBQSxPQUFNLENBQUMsRUFBQztnQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2FBQ3ZEO1lBQ0csR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pCLE1BQU0sRUFBRSxHQUFHO2dCQUNYLEVBQUUsRUFBRSxVQUFVO2FBQ2pCLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFBO1FBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBRW5ELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUVKO0FBN0VELHdCQTZFQyIsImZpbGUiOiJ3ZWJhcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IHJhdGVMaW1pdCA9IHJlcXVpcmUoXCJleHByZXNzLXJhdGUtbGltaXRcIik7XG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJylcbmNvbnN0IGp3dCAgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IGluZGV4ID0gcmVxdWlyZSgnLi9pbmRleCcpO1xudmFyIHB1YmxpY0tFWSA9IGZzLnJlYWRGaWxlU3luYygnLi9wdWJsaWMucGVtJywgJ3V0ZjgnKTtcbmltcG9ydCB7IERpc2NvcmRUUyB9IGZyb20gJy4vZGlzY29yZCdcbmltcG9ydCB7IHJlYWRTeW5jIH0gZnJvbSAnZnMnO1xuXG5leHBvcnQgY2xhc3MgV2ViQXBpIHtcblxuXG4gICAgcHVibGljIHN0YXJ0KGJvdDogRGlzY29yZFRTKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uID0gZXhwcmVzcygpO1xuICAgICAgICBhcHAuc2V0KCd0cnVzdCBwcm94eScsIDEpO1xuICAgICAgICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSlcblxuICAgICAgICAvL0RlZmluZSBBUEkgcmF0ZSBsaW1pdFxuICAgICAgICBjb25zdCBsaW1pdGVyID0gcmF0ZUxpbWl0KHtcbiAgICAgICAgICAgIHdpbmRvd01zOiAxICogNjAgKiAxMDAwLFxuICAgICAgICAgICAgbWF4OiA1XG4gICAgICAgIH0pO1xuICAgICAgICBhcHAudXNlKGxpbWl0ZXIpO1xuXG4gICAgICAgIGFwcC5nZXQoJy8nLCBmdW5jdGlvbiAocmVxOiBhbnksIHJlczogYW55KSB7XG4gICAgICAgICAgICByZXMuc2VuZCgnSGVsbG8gV29ybGQhJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vVmFsaWRhdGUgSlNPTiBib2R5LlxuICAgICAgICBhcHAudXNlKChyZXE6IGFueSwgcmVzOmFueSwgbmV4dDphbnkpID0+IHtcbiAgICAgICAgICAgIGJvZHlQYXJzZXIuanNvbigpKHJlcSwgcmVzLCAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiWy0+XSBXcm9uZyBqc29uIHJldWVzdC5cIilcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcIkpTT04gc3RydWN0IG5vdCB2YWxpZWQuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHAucG9zdChcIi9hcGkvZGlzY29yZC9ub3RpZmljYXRpb25cIiwgZnVuY3Rpb24ocmVxOiBhbnksIHJlczogYW55KXtcbiAgICAgICAgICAgIGlmICghcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbil7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJQbGVhc2UgdXNlIEJlYXJlciBUb2tlbi4gWW91IGdldCB0aGUgdG9rZW4gYnkgdHlwaW5nICFpZCB0byB5b3VyIGRpc2NvcmQgY2hhbm5lbC5cIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhdXRoSGVhZGVyID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5yZXBsYWNlKFwiQmVhcmVyIFwiLFwiXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb2RlZCA9IGp3dC52ZXJpZnkoYXV0aEhlYWRlciwgcHVibGljS0VZKTtcbiAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJUaGUgdG9rZW4gaXMgbm90IGNvcnJlY3QuIFBsZWFzZSB1cGRhdGUgeW91ciBjb2RlLiAhaWRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBpZiAocmVxLmJvZHkuZW1iZWQgPT0gdW5kZWZpbmVkIHx8IHJlcS5ib2R5Lm1lc3NhZ2UgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlstPl0gUmVxdWVzdCBwcm9wZXJ0eSBub3Qgc2V0LlwiKVxuICAgICAgICAgICAgICAgIHJldHVybiAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiWW91ciBqc29uIGJvZHkgbmVlZCB0aGUgcHJvcGVydHkgKGVtYmVkOmJvb2wpIChtZXNzYWdlOnN0cmluZylcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm90LnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxLmJvZHkpLCBkZWNvZGVkLmNoYW5uZWwpO1xuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SISA6OiBcIiArIEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5KSlcbiAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgIGlkOiBcIm9rZSBzZW5kXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuXG4gICAgICAgIGFwcC5saXN0ZW4oODA4MCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnRXhhbXBsZSBhcHAgbGlzdGVuaW5nIG9uIHBvcnQgODA4MCEnKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbn0iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL2J1aWxkIn0=
