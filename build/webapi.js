"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const rateLimit = require("express-rate-limit");
var bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const index = require('./index');
var publicKEY = fs.readFileSync('./public.pem', 'utf8');
class WebApi {
    start(bot) {
        const app = express();
        app.set('trust proxy', 1);
        app.use(bodyParser.urlencoded({ extended: false }));
        //app.use(bodyParser.json())
        //Define API rate limit
        const limiter = rateLimit({
            windowMs: 1 * 60 * 1000,
            max: 5
        });
        app.use(limiter);
        app.get('/', function (req, res) {
            res.send('Hello World!');
        });
        //Validate JSON body.
        app.use((req, res, next) => {
            bodyParser.json()(req, res, err => {
                if (err) {
                    console.log("[->] Wrong json reuest.");
                    return res.status(400).json({
                        status: 400,
                        id: "JSON struct not valied."
                    });
                }
                next();
            });
        });
        app.post("/api/discord/notification", function (req, res) {
            if (!req.headers.authorization) {
                res.status(401).json({
                    status: 401,
                    message: "Please use Bearer Token. You get the token by typing !id to your discord channel."
                });
                return;
            }
            var authHeader = req.headers.authorization.replace("Bearer ", "");
            try {
                var decoded = jwt.verify(authHeader, publicKEY);
            }
            catch (err) {
                res.status(401).json({
                    status: 401,
                    message: "The token is not correct. Please update your code. !id"
                });
                return;
            }
            try {
                if (req.body.embed == undefined || req.body.message == undefined) {
                    console.log("[->] Request property not set.");
                    return res.status(400).json({
                        status: 400,
                        message: "Your json body need the property (embed:bool) (message:string)"
                    });
                }
                bot.send(JSON.stringify(req.body), decoded.channel);
            }
            catch (e) {
                console.log("ERROR! :: " + JSON.stringify(req.body));
            }
            res.status(200).json({
                status: 200,
                id: "oke send"
            });
        });
        app.listen(3000, function () {
            console.log('Example app listening on port 3000!');
        });
    }
}
exports.WebApi = WebApi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFDO2dCQUNILE9BQU87YUFDVjtZQUVMLElBQUc7Z0JBQ0MsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksU0FBUyxFQUFDO29CQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7b0JBQzdDLE9BQVMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQzFCLE1BQU0sRUFBRSxHQUFHO3dCQUNYLE9BQU8sRUFBRSxnRUFBZ0U7cUJBQzVFLENBQUMsQ0FBQztpQkFDTjtnQkFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN2RDtZQUFBLE9BQU0sQ0FBQyxFQUFDO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7YUFDdkQ7WUFDRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDakIsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsRUFBRSxFQUFFLFVBQVU7YUFDakIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUE7UUFFRixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFFbkQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBRUo7QUE5RUQsd0JBOEVDIiwiZmlsZSI6IndlYmFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgcmF0ZUxpbWl0ID0gcmVxdWlyZShcImV4cHJlc3MtcmF0ZS1saW1pdFwiKTtcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKVxuY29uc3Qgand0ICA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuL2luZGV4Jyk7XG52YXIgcHVibGljS0VZID0gZnMucmVhZEZpbGVTeW5jKCcuL3B1YmxpYy5wZW0nLCAndXRmOCcpO1xuaW1wb3J0IHsgRGlzY29yZFRTIH0gZnJvbSAnLi9kaXNjb3JkJ1xuaW1wb3J0IHsgcmVhZFN5bmMgfSBmcm9tICdmcyc7XG5cbmV4cG9ydCBjbGFzcyBXZWJBcGkge1xuXG5cbiAgICBwdWJsaWMgc3RhcnQoYm90OiBEaXNjb3JkVFMpOiB2b2lkIHtcblxuICAgICAgICBjb25zdCBhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24gPSBleHByZXNzKCk7XG4gICAgICAgIGFwcC5zZXQoJ3RydXN0IHByb3h5JywgMSk7XG4gICAgICAgIGFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKVxuICAgICAgICAvL2FwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXG5cbiAgICAgICAgLy9EZWZpbmUgQVBJIHJhdGUgbGltaXRcbiAgICAgICAgY29uc3QgbGltaXRlciA9IHJhdGVMaW1pdCh7XG4gICAgICAgICAgICB3aW5kb3dNczogMSAqIDYwICogMTAwMCxcbiAgICAgICAgICAgIG1heDogNVxuICAgICAgICB9KTtcbiAgICAgICAgYXBwLnVzZShsaW1pdGVyKTtcblxuICAgICAgICBhcHAuZ2V0KCcvJywgZnVuY3Rpb24gKHJlcTogYW55LCByZXM6IGFueSkge1xuICAgICAgICAgICAgcmVzLnNlbmQoJ0hlbGxvIFdvcmxkIScpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL1ZhbGlkYXRlIEpTT04gYm9keS5cbiAgICAgICAgYXBwLnVzZSgocmVxOiBhbnksIHJlczphbnksIG5leHQ6YW55KSA9PiB7XG4gICAgICAgICAgICBib2R5UGFyc2VyLmpzb24oKShyZXEsIHJlcywgZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiWy0+XSBXcm9uZyBqc29uIHJldWVzdC5cIilcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcIkpTT04gc3RydWN0IG5vdCB2YWxpZWQuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhcHAucG9zdChcIi9hcGkvZGlzY29yZC9ub3RpZmljYXRpb25cIiwgZnVuY3Rpb24ocmVxOiBhbnksIHJlczogYW55KXtcbiAgICAgICAgICAgIGlmICghcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbil7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJQbGVhc2UgdXNlIEJlYXJlciBUb2tlbi4gWW91IGdldCB0aGUgdG9rZW4gYnkgdHlwaW5nICFpZCB0byB5b3VyIGRpc2NvcmQgY2hhbm5lbC5cIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhdXRoSGVhZGVyID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5yZXBsYWNlKFwiQmVhcmVyIFwiLFwiXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb2RlZCA9IGp3dC52ZXJpZnkoYXV0aEhlYWRlciwgcHVibGljS0VZKTtcbiAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJUaGUgdG9rZW4gaXMgbm90IGNvcnJlY3QuIFBsZWFzZSB1cGRhdGUgeW91ciBjb2RlLiAhaWRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBpZiAocmVxLmJvZHkuZW1iZWQgPT0gdW5kZWZpbmVkIHx8IHJlcS5ib2R5Lm1lc3NhZ2UgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlstPl0gUmVxdWVzdCBwcm9wZXJ0eSBub3Qgc2V0LlwiKVxuICAgICAgICAgICAgICAgIHJldHVybiAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiWW91ciBqc29uIGJvZHkgbmVlZCB0aGUgcHJvcGVydHkgKGVtYmVkOmJvb2wpIChtZXNzYWdlOnN0cmluZylcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm90LnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxLmJvZHkpLCBkZWNvZGVkLmNoYW5uZWwpO1xuICAgICAgICB9Y2F0Y2goZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SISA6OiBcIiArIEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5KSlcbiAgICAgICAgfVxuICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgIGlkOiBcIm9rZSBzZW5kXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuXG4gICAgICAgIGFwcC5saXN0ZW4oMzAwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnRXhhbXBsZSBhcHAgbGlzdGVuaW5nIG9uIHBvcnQgMzAwMCEnKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbn0iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL2J1aWxkIn0=
